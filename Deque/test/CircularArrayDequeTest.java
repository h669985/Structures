import adt.DequeADT;
import circulararraydeque.CircularArrayDeque;
import org.junit.jupiter.api.Test;

import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

/**
 * A JUnit test for testing my circular array deque implementation of the DequeADT interface
 *
 * @author Jonas Hellevik
 * @version 1.0
 */

public class CircularArrayDequeTest extends AbstractDequeADTTest {
    @Override
    DequeADT<String> createDeque() {
        return new CircularArrayDeque<>();
    }

    /*
     * We need to test that ensureCapacity is working correctly
     * I've written a lazy test that's not very helpful for debugging, but it's better than nothing
     * The test will randomly increase or decrease the capacity of the array
     * This is based on a private method that doubles the capacity if it is full
     * or decreases the capacity by half if it is only 1/16th full.
     * I have seen that the test can sometimes increase or decrease 1-4 times in a row before switching,
     * which seems pretty good for testing robustness.
     * Test generated by ChatGPT 4.0 after using a previous version of the test that I wrote myself as inspiration
     */

    @Test
    void ensureCapacityTest() throws InterruptedException {
        System.gc(); Thread.sleep(500);
        int numOfRuns = 1000000;
        Random seed = new Random();
        int initialCapacity = seed.nextInt(16, 1024);
        CircularArrayDeque<Integer> deque = new CircularArrayDeque<>(initialCapacity);

        // Initially fill the deque to capacity to possibly trigger an increase in size
        for (int i = 0; i < initialCapacity; i++) {
            assertDoesNotThrow(() -> deque.addToBack(seed.nextInt(64)));
        }

        boolean lastActionWasAdd = true;

        while (numOfRuns > 0) {
            // Decide to add or remove based on the last action
            if (lastActionWasAdd && seed.nextDouble() < 0.5) {
                // If the last action was add, 50% chance to switch to remove
                for (int i = 0; i < seed.nextInt(1, initialCapacity/2); i++) {
                    if (!deque.isEmpty()) { // Prevents removing from an empty deque
                        assertDoesNotThrow(deque::removeBack);
                        lastActionWasAdd = false;
                    }
                }
            } else {
                // If the last action was remove, always add
                for (int i = 0; i < seed.nextInt(1, initialCapacity/16); i++) {
                    assertDoesNotThrow(() -> deque.addToBack(seed.nextInt(64)));
                }

                lastActionWasAdd = true;
            }

            // Occasionally, switch actions regardless of the last one, using different probabilities
            if (seed.nextDouble() < 0.2) {
                lastActionWasAdd = !lastActionWasAdd; // Switch action
            }

            numOfRuns--;
        }
    }

} // end CircularArrayDequeTest
